generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum PlanTier {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique @db.Citext
  name         String   @db.VarChar(120)
  passwordHash String   @db.VarChar(200)
  role         UserRole @default(USER)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  claims     Claim[]
  activities UserActivity[]

  @@map("users")
  @@index([createdAt])
  @@index([isActive])
}

model Organizer {
  id           String    @id @default(cuid())
  email        String    @unique @db.Citext
  name         String    @db.VarChar(120)
  company      String?   @db.VarChar(160)
  passwordHash String    @db.VarChar(200)
  isActive     Boolean   @default(true)
  tier         PlanTier  @default(FREE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  apiKeys   ApiKey[]
  campaigns Campaign[]

  @@map("organizers")
  @@index([createdAt])
  @@index([isActive, tier])
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique @db.VarChar(80)
  name        String   @db.VarChar(120)
  organizerId String
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())

  organizer Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@index([organizerId])
  @@index([isActive])
  @@index([lastUsedAt])
}

model Campaign {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(200)
  description    String?
  eventDate      DateTime
  location       String?  @db.VarChar(200)
  imageUrl       String?  @db.VarChar(600)
  externalUrl    String?  @db.VarChar(600)
  secretCode     String?  @db.VarChar(120)
  secretCodeHash String?  @db.VarChar(200)
  maxClaims      Int?
  isActive       Boolean  @default(true)
  organizerId    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  metadata       Json?

  organizer Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  claims    Claim[]

  @@map("campaigns")
  @@index([organizerId])
  @@index([createdAt])
  @@index([organizerId, isActive])
  @@index([eventDate])
}

model Claim {
  id              String   @id @default(cuid())
  campaignId      String
  userId          String?
  userPublicKey   String   @db.VarChar(100)
  mintAddress     String?  @db.VarChar(100)
  tokenAccount    String?  @db.VarChar(100)
  transactionHash String?  @db.VarChar(140)
  gasCost         Int?
  claimedAt       DateTime @default(now())
  userAgent       String?
  ipAddress       String?  @db.VarChar(64)
  metadata        Json?

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([campaignId, userPublicKey])
  @@map("claims")
  @@index([claimedAt])
  @@index([campaignId, claimedAt])
  @@index([userPublicKey, claimedAt])
}

model Usage {
  id          String   @id @default(cuid())
  organizerId String
  date        DateTime @default(now())
  claims      Int      @default(0)
  gasCost     Int      @default(0)

  @@unique([organizerId, date])
  @@map("usage")
  @@index([date])
  @@index([organizerId, date])
}

model NFTMint {
  id                   String   @id @default(cuid())
  mintAddress          String   @unique @db.VarChar(100)
  userPublicKey        String   @db.VarChar(100)
  transactionSignature String   @unique @db.VarChar(140)
  metadata             Json
  gasCost              Int
  relayerPublicKey     String   @db.VarChar(100)
  serviceId            String?  @db.VarChar(120)
  eventId              String?  @db.VarChar(120)
  eventName            String?  @db.VarChar(200)
  network              String   @default("devnet") @db.VarChar(32)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("nft_mints")
  @@index([userPublicKey, createdAt])
  @@index([createdAt])
  @@index([relayerPublicKey, createdAt])
}

model RelayerStats {
  id               String   @id @default(cuid())
  relayerPublicKey String   @unique @db.VarChar(100)
  totalMints       Int      @default(0)
  totalGasPaid     BigInt   @default(0)
  currentBalance   BigInt   @default(0)
  lastActivity     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("relayer_stats")
  @@index([lastActivity])
}

model UserActivity {
  id            String   @id @default(cuid())
  userPublicKey String   @db.VarChar(100)
  action        String   @db.VarChar(60)
  details       Json
  ipAddress     String?  @db.VarChar(64)
  userAgent     String?
  createdAt     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity")
  @@index([userId, createdAt])
  @@index([userPublicKey, createdAt])
}
